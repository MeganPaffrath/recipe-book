{"version":3,"sources":["components/Recipe.jsx","components/App.jsx","index.js"],"names":["Recipe","recipe","ingredients","instructions","ovenTemp","categories","keyIng","keyInst","className","map","ingredient","step","category","App","useState","type","setType","makeRecipe","onChange","input","target","value","id","placeholder","size","onClick","recipes","search","filter","toLowerCase","includes","filterRecipes","ReactDOM","render","document","getElementById"],"mappings":"wKAEe,SAASA,EAAT,GAA4E,IAA3DC,EAA0D,EAA1DA,OAAQC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,WACvEC,EAAS,EACTC,EAAU,EACd,OACE,sBAAKC,UAAU,SAAf,UACE,6BAAKP,IACL,8CACA,6BACCC,EAAYO,KAAK,SAACC,GAEjB,OADAJ,IAEE,6BAAwBI,GAAf,IAAMJ,QAInB,+CACA,6BACGH,EAAaM,KAAK,SAACE,GAElB,OADAJ,IAEE,6BAA4BI,GAAnB,OAASJ,QAMxB,4CACA,4BAAIF,EAAWI,KAAI,SAACG,GAClB,OAAOA,EAAW,SAEpB,wCAAWR,QC5BF,SAASS,IAAO,IAAD,EACJC,mBAAS,OADL,mBACrBC,EADqB,KACfC,EADe,KAG5B,SAASC,EAAWhB,GAClB,IAAMG,EAAWH,EAAOG,SAAWH,EAAOG,SAAW,EAErD,OAAO,cAACJ,EAAD,CAELC,OAAQA,EAAOA,OACfC,YAAaD,EAAOC,YACpBC,aAAcF,EAAOE,aACrBE,WAAYJ,EAAOI,WACnBD,SAAUA,GALLH,EAAOA,QA8ChB,OACE,gCACE,iDACA,uBACA,iCACA,uBAAOiB,SAVX,SAAsBC,GACpBH,EAAQG,EAAMC,OAAOC,QASYN,KAAK,SAASO,GAAG,WAAWC,YAAY,8CAA8CC,KAAK,SAE1H,uBACA,mCACE,wBAAQC,QAAS,kBAAMT,EAAQ,SAA/B,mBACA,wBAAQS,QAAS,kBAAMT,EAAQ,UAA/B,oBACA,wBAAQS,QAAS,kBAAMT,EAAQ,QAA/B,oBAGF,uBAGU,QAATD,EACCW,EAAQjB,IAAIQ,GAvDlB,SAAuBS,EAASC,GA6B9B,OA5BmBD,EAAQE,QAAO,SAAS3B,GAEzC,GAAIA,EAAOA,OAAO4B,cAAcC,SAASH,EAAOE,eAC9C,OAAO,EAGT,IAAK,IAAMnB,KAAcT,EAAOC,YAC9B,GAAID,EAAOC,YAAYQ,GAAYmB,cAAcC,SAASH,EAAOE,eAC/D,OAAO,EAKX,IAAK,IAAMd,KAAQd,EAAOI,WACxB,GAAIJ,EAAOI,WAAWU,GAAMc,cAAcC,SAASH,EAAOE,eACxD,OAAO,EAKX,OAAI5B,EAAOG,WAAauB,KAmCpBI,CAAcL,EAASX,GAAMN,IAAIQ,MCtE3Ce,IAASC,OAAO,cAACpB,EAAD,IAASqB,SAASC,eAAe,U","file":"static/js/main.fb4ea6e8.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Recipe({recipe, ingredients, instructions, ovenTemp, categories}) {\n  var keyIng = 0;\n  var keyInst = 0;\n  return (\n    <div className=\"recipe\">\n      <h1>{recipe}</h1>\n      <h2>Ingredients:</h2>\n      <ul>\n      {ingredients.map( (ingredient) => {\n        keyIng++;\n        return (\n          <li key={\"i\" + keyIng}>{ingredient}</li> \n        )\n      })}\n      </ul>\n      <h2>Instructions:</h2>\n      <ol>\n        {instructions.map( (step) => {\n          keyInst++;\n          return (\n            <li key={\"inst\" + keyInst}>{step}</li>\n          )\n        \n        }\n        )}\n      </ol>\n      <h2>Categories</h2>\n      <p>{categories.map((category) => {\n        return category + \" \"\n      })}</p>\n      <h3>Temp: {ovenTemp}</h3>\n    </div>\n    \n\n  )\n}","import React, { useState } from \"react\";\nimport recipes from \"../recipes.json\";\nimport Recipe from \"./Recipe\";\n\nexport default function App() {\n  const [type, setType] = useState(\"all\");\n\n  function makeRecipe(recipe) {\n    const ovenTemp = recipe.ovenTemp ? recipe.ovenTemp : 0\n\n    return <Recipe \n      key={recipe.recipe}\n      recipe={recipe.recipe}\n      ingredients={recipe.ingredients}\n      instructions={recipe.instructions}\n      categories={recipe.categories}\n      ovenTemp={ovenTemp}\n    />\n  }\n\n  function filterRecipes(recipes, search) {\n    const recipesNew = recipes.filter(function(recipe) {\n      // Find by name\n      if (recipe.recipe.toLowerCase().includes(search.toLowerCase())) {\n        return true;\n      }\n      // Find by Ingredient\n      for (const ingredient in recipe.ingredients) {\n        if (recipe.ingredients[ingredient].toLowerCase().includes(search.toLowerCase())) {\n          return true;\n        }\n      }\n\n      // Find by type\n      for (const type in recipe.categories) {\n        if (recipe.categories[type].toLowerCase().includes(search.toLowerCase())) {\n          return true;\n        }\n      }\n\n      // find by temp\n      if (recipe.ovenTemp === search) {\n        return true;\n      }\n\n      // Otherwise\n      return false;\n    });\n    \n    return recipesNew;\n  }\n\n  function handleChange(input) {\n    setType(input.target.value);\n  }\n\n\n  return (\n    <div>\n      <h1>Megan's Recipes</h1>\n      <br/>\n      <center>\n      <input onChange={handleChange} type=\"search\" id=\"mySearch\" placeholder=\"Search by title/ingredient/type/temperature\" size=\"40\"/>\n      </center>\n      <br/>\n      <center>\n        <button onClick={() => setType(\"meal\")}>meals</button>\n        <button onClick={() => setType(\"snack\")}>snacks</button>\n        <button onClick={() => setType(\"all\")}>all</button>\n      </center>\n\n      <br/>\n      \n\n      {type === \"all\" ? (\n        recipes.map(makeRecipe)\n      ) : filterRecipes(recipes, type).map(makeRecipe)}\n\n    </div>\n    \n  )\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}